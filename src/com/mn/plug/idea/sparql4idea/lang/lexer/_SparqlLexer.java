/* The following code was generated by JFlex 1.6.0 */

package com.mn.plug.idea.sparql4idea.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.mn.plug.idea.sparql4idea.lang.lexer.SparqlTokenTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>/home/akovrov/Documents/proj/opensource/sparql-idea-plugin/src/com/mn/plug/idea/sparql4idea/lang/lexer/_SparqlLexer.flex</tt>
 */
class _SparqlLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int PNAME_NS = 2;
  public static final int PNAME_LN = 4;
  public static final int PNAME_LN2 = 6;
  public static final int IRI_REF_BODY = 8;
  public static final int IRI_REF_END = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\1\1\25\1\17\1\101\1\101\1\17\22\1\1\25\1\74\1\20"+
    "\1\100\1\6\1\0\1\72\1\16\1\23\1\24\1\75\1\14\1\70"+
    "\1\11\1\13\1\76\12\12\1\4\1\67\1\2\1\73\1\3\1\6"+
    "\1\7\1\34\1\32\1\46\1\52\1\15\1\41\1\62\1\61\1\43"+
    "\1\10\1\55\1\45\1\57\1\51\1\53\1\36\1\10\1\37\1\35"+
    "\1\47\1\54\1\10\1\60\1\44\1\56\1\10\1\26\1\21\1\27"+
    "\1\77\1\5\1\1\1\63\1\33\1\46\1\52\1\15\1\42\1\62"+
    "\1\61\1\43\1\10\1\55\1\45\1\57\1\22\1\53\1\36\1\10"+
    "\1\40\1\64\1\50\1\54\1\10\1\60\1\44\1\56\1\10\1\65"+
    "\1\71\1\66\7\0\1\102\44\0\1\103\12\0\1\103\1\0\1\31"+
    "\2\0\1\103\5\0\27\104\1\0\3\103\34\104\1\0\u01ca\104\4\30"+
    "\14\104\16\30\5\104\7\30\1\104\1\30\1\104\21\30\160\31\5\104"+
    "\1\30\2\104\2\30\4\104\1\0\1\104\6\30\1\104\1\30\3\104"+
    "\1\30\1\104\1\30\24\104\1\30\123\104\1\30\213\104\10\30\246\104"+
    "\1\30\46\104\2\30\1\104\7\30\47\104\110\30\33\104\5\30\3\104"+
    "\55\30\53\104\43\30\2\104\1\30\143\104\1\30\1\104\17\30\2\104"+
    "\7\30\2\104\12\30\3\104\2\30\1\104\20\30\1\104\1\30\36\104"+
    "\35\30\131\104\13\30\1\104\30\30\41\104\11\30\2\104\4\30\1\104"+
    "\5\30\26\104\4\30\1\104\11\30\1\104\3\30\1\104\27\30\31\104"+
    "\107\30\23\104\121\30\66\104\3\30\1\104\22\30\1\104\7\30\12\104"+
    "\17\30\20\104\4\30\10\104\2\30\2\104\2\30\26\104\1\30\7\104"+
    "\1\30\1\104\3\30\4\104\3\30\1\104\20\30\1\104\15\30\2\104"+
    "\1\30\3\104\16\30\2\104\23\30\6\104\4\30\2\104\2\30\26\104"+
    "\1\30\7\104\1\30\2\104\1\30\2\104\1\30\2\104\37\30\4\104"+
    "\1\30\1\104\23\30\3\104\20\30\11\104\1\30\3\104\1\30\26\104"+
    "\1\30\7\104\1\30\2\104\1\30\5\104\3\30\1\104\22\30\1\104"+
    "\17\30\2\104\43\30\10\104\2\30\2\104\2\30\26\104\1\30\7\104"+
    "\1\30\2\104\1\30\5\104\3\30\1\104\36\30\2\104\1\30\3\104"+
    "\17\30\1\104\21\30\1\104\1\30\6\104\3\30\3\104\1\30\4\104"+
    "\3\30\2\104\1\30\1\104\1\30\2\104\3\30\2\104\3\30\3\104"+
    "\3\30\14\104\26\30\1\104\64\30\10\104\1\30\3\104\1\30\27\104"+
    "\1\30\20\104\3\30\1\104\32\30\2\104\6\30\2\104\43\30\10\104"+
    "\1\30\3\104\1\30\27\104\1\30\12\104\1\30\5\104\3\30\1\104"+
    "\40\30\1\104\1\30\2\104\17\30\2\104\22\30\10\104\1\30\3\104"+
    "\1\30\51\104\2\30\1\104\20\30\1\104\21\30\2\104\30\30\6\104"+
    "\5\30\22\104\3\30\30\104\1\30\11\104\1\30\1\104\2\30\7\104"+
    "\72\30\60\104\1\30\2\104\14\30\7\104\72\30\2\104\1\30\1\104"+
    "\2\30\2\104\1\30\1\104\2\30\1\104\6\30\4\104\1\30\7\104"+
    "\1\30\3\104\1\30\1\104\1\30\1\104\2\30\2\104\1\30\4\104"+
    "\1\30\2\104\11\30\1\104\2\30\5\104\1\30\1\104\25\30\4\104"+
    "\40\30\1\104\77\30\10\104\1\30\44\104\33\30\5\104\163\30\53\104"+
    "\24\30\1\104\20\30\6\104\4\30\4\104\3\30\1\104\3\30\2\104"+
    "\7\30\3\104\4\30\15\104\14\30\1\104\21\30\46\104\1\30\1\104"+
    "\5\30\1\104\2\30\53\104\1\30\u014d\104\1\30\4\104\2\30\7\104"+
    "\1\30\1\104\1\30\4\104\2\30\51\104\1\30\4\104\2\30\41\104"+
    "\1\30\4\104\2\30\7\104\1\30\1\104\1\30\4\104\2\30\17\104"+
    "\1\30\71\104\1\30\4\104\2\30\103\104\45\30\20\104\20\30\125\104"+
    "\14\30\u026c\104\2\30\21\104\1\30\32\104\5\30\113\104\6\30\10\104"+
    "\7\30\15\104\1\30\4\104\16\30\22\104\16\30\22\104\16\30\15\104"+
    "\1\30\3\104\17\30\64\104\43\30\1\104\4\30\1\104\103\30\130\104"+
    "\10\30\51\104\1\30\1\104\5\30\106\104\12\30\37\104\61\30\36\104"+
    "\2\30\5\104\13\30\54\104\25\30\7\104\70\30\27\104\11\30\65\104"+
    "\122\30\1\104\135\30\57\104\21\30\7\104\67\30\36\104\15\30\2\104"+
    "\12\30\54\104\32\30\44\104\51\30\3\104\12\30\44\104\153\30\4\104"+
    "\1\30\4\104\3\30\2\104\11\30\300\104\100\30\u0116\104\2\30\6\104"+
    "\2\30\46\104\2\30\6\104\2\30\10\104\1\30\1\104\1\30\1\104"+
    "\1\30\1\104\1\30\37\104\2\30\65\104\1\30\7\104\1\30\1\104"+
    "\3\30\3\104\1\30\7\104\3\30\4\104\2\30\6\104\4\30\15\104"+
    "\5\30\3\104\1\30\7\104\3\30\14\0\2\30\32\0\1\102\1\102"+
    "\25\0\2\31\57\0\1\30\1\104\15\30\1\104\20\30\15\104\145\30"+
    "\1\104\4\30\1\104\2\30\12\104\1\30\1\104\3\30\5\104\6\30"+
    "\1\104\1\30\1\104\1\30\1\104\1\30\4\104\1\30\13\104\2\30"+
    "\4\104\5\30\5\104\4\30\1\104\64\30\2\104\13\30\u0a70\0\57\104"+
    "\1\30\57\104\1\30\205\104\6\30\4\104\3\30\2\104\14\30\46\104"+
    "\1\30\1\104\5\30\1\104\2\30\70\104\7\30\1\104\20\30\27\104"+
    "\11\30\7\104\1\30\7\104\1\30\7\104\1\30\7\104\1\30\7\104"+
    "\1\30\7\104\1\30\7\104\1\30\7\104\120\30\1\104\u01c0\30\21\0"+
    "\4\30\2\104\52\30\5\104\5\30\2\104\4\30\126\104\6\30\3\104"+
    "\1\30\132\104\1\30\4\104\5\30\51\104\3\30\136\104\21\30\33\104"+
    "\65\30\20\104\u0200\30\u19b6\104\112\30\u51cd\104\63\30\u048d\104\103\30\56\104"+
    "\2\30\u010d\104\3\30\20\104\12\30\2\104\24\30\57\104\20\30\37\104"+
    "\2\30\106\104\61\30\11\104\2\30\147\104\2\30\4\104\1\30\36\104"+
    "\2\30\2\104\105\30\13\104\1\30\3\104\1\30\4\104\1\30\27\104"+
    "\35\30\64\104\16\30\62\104\76\30\6\104\3\30\1\104\16\30\34\104"+
    "\12\30\27\104\31\30\35\104\7\30\57\104\34\30\1\104\20\30\5\104"+
    "\1\30\12\104\12\30\5\104\1\30\51\104\27\30\3\104\1\30\10\104"+
    "\24\30\27\104\3\30\1\104\3\30\62\104\1\30\1\104\3\30\2\104"+
    "\2\30\5\104\2\30\1\104\1\30\1\104\30\30\3\104\2\30\13\104"+
    "\7\30\3\104\14\30\6\104\2\30\6\104\2\30\6\104\11\30\7\104"+
    "\1\30\7\104\1\30\53\104\1\30\4\104\4\30\2\104\132\30\43\104"+
    "\35\30\u2ba4\104\14\30\27\104\4\30\61\104\4\30\u2100\0\u016e\104\2\30"+
    "\152\104\46\30\7\104\14\30\5\104\5\30\1\104\1\30\12\104\1\30"+
    "\15\104\1\30\5\104\1\30\1\104\1\30\2\104\1\30\2\104\1\30"+
    "\154\104\41\30\u016b\104\22\30\100\104\2\30\66\104\10\30\40\0\14\104"+
    "\164\30\5\104\1\30\207\104\44\30\32\104\6\30\32\104\13\30\131\104"+
    "\3\30\6\104\2\30\6\104\2\30\6\104\2\30\3\104\41\30\2\0"+
    "\14\103\1\0\32\103\1\0\23\103\1\0\2\103\1\0\17\103\2\0"+
    "\16\103\42\0\173\103\u0185\0\35\103\3\0\61\103\57\0\40\103\20\0"+
    "\21\103\1\0\10\103\6\0\46\103\12\0\36\103\2\0\44\103\4\0"+
    "\10\103\60\0\236\103\142\0\50\103\10\0\64\103\234\0\u0137\103\11\0"+
    "\26\103\12\0\10\103\230\0\6\103\2\0\1\103\1\0\54\103\1\0"+
    "\2\103\3\0\1\103\2\0\27\103\12\0\27\103\11\0\37\103\141\0"+
    "\26\103\12\0\32\103\106\0\70\103\6\0\2\103\100\0\1\103\17\0"+
    "\4\103\1\0\3\103\1\0\33\103\54\0\35\103\3\0\35\103\43\0"+
    "\10\103\1\0\34\103\33\0\66\103\12\0\26\103\12\0\23\103\15\0"+
    "\22\103\156\0\111\103\u03ba\0\65\103\113\0\55\103\40\0\31\103\32\0"+
    "\44\103\51\0\43\103\3\0\1\103\14\0\60\103\16\0\4\103\25\0"+
    "\1\103\45\0\22\103\1\0\31\103\204\0\57\103\46\0\10\103\2\0"+
    "\2\103\2\0\26\103\1\0\7\103\1\0\2\103\1\0\5\103\3\0"+
    "\1\103\37\0\5\103\u011e\0\60\103\24\0\2\103\1\0\1\103\270\0"+
    "\57\103\121\0\60\103\24\0\1\103\73\0\53\103\u01f5\0\100\103\37\0"+
    "\1\103\u01c0\0\71\103\u0507\0\u0399\103\u0c67\0\u042f\103\u33d1\0\u0239\103\7\0"+
    "\37\103\161\0\36\103\22\0\60\103\20\0\4\103\37\0\25\103\5\0"+
    "\23\103\u0370\0\105\103\13\0\1\103\102\0\15\103\u4060\0\2\103\u0bfe\0"+
    "\153\103\5\0\15\103\3\0\11\103\7\0\12\103\u1766\0\125\103\1\0"+
    "\107\103\1\0\2\103\2\0\1\103\2\0\2\103\2\0\4\103\1\0"+
    "\14\103\1\0\1\103\1\0\7\103\1\0\101\103\1\0\4\103\2\0"+
    "\10\103\1\0\7\103\1\0\34\103\1\0\4\103\1\0\5\103\1\0"+
    "\1\103\3\0\7\103\1\0\u0154\103\2\0\31\103\1\0\31\103\1\0"+
    "\37\103\1\0\31\103\1\0\37\103\1\0\31\103\1\0\37\103\1\0"+
    "\31\103\1\0\37\103\1\0\31\103\1\0\10\103\u1034\0\305\103\u053b\0"+
    "\4\103\1\0\33\103\1\0\2\103\1\0\1\103\2\0\1\103\1\0"+
    "\12\103\1\0\4\103\1\0\1\103\1\0\1\103\6\0\1\103\4\0"+
    "\1\103\1\0\1\103\1\0\1\103\1\0\3\103\1\0\2\103\1\0"+
    "\1\103\2\0\1\103\1\0\1\103\1\0\1\103\1\0\1\103\1\0"+
    "\1\103\1\0\2\103\1\0\1\103\2\0\4\103\1\0\7\103\1\0"+
    "\4\103\1\0\4\103\1\0\1\103\1\0\12\103\1\0\21\103\5\0"+
    "\3\103\1\0\5\103\1\0\21\103\u1144\0\ua6d7\103\51\0\u1035\103\13\0"+
    "\336\103\u3fe2\0\u021e\103\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05f0\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\0\1\2\1\3\1\4\1\5\3\2"+
    "\1\6\1\7\1\10\1\11\1\12\1\2\1\13\1\2"+
    "\1\6\1\14\1\15\1\16\1\17\1\2\17\6\1\20"+
    "\1\21\1\22\1\23\1\24\2\2\1\25\1\26\1\27"+
    "\1\30\1\2\1\31\1\6\1\32\1\33\1\32\1\34"+
    "\1\35\1\1\1\36\1\0\1\37\1\40\1\41\1\42"+
    "\1\0\1\43\1\44\2\0\1\45\1\0\1\46\1\0"+
    "\1\47\2\0\1\50\2\0\1\50\1\0\1\6\1\0"+
    "\1\51\1\0\1\52\2\6\1\53\30\6\1\54\1\55"+
    "\1\56\1\57\1\60\4\0\1\61\1\0\1\62\2\0"+
    "\1\63\1\64\1\0\1\50\2\0\3\6\1\65\2\6"+
    "\1\66\31\6\1\0\1\44\1\0\1\67\1\0\1\70"+
    "\4\0\1\6\1\71\7\6\1\72\6\6\1\73\2\6"+
    "\1\74\1\75\11\6\2\0\1\76\1\77\4\6\1\100"+
    "\1\101\3\6\1\102\1\6\1\103\1\6\1\104\6\6"+
    "\1\105\1\6\1\106\1\107\1\110\1\111\1\6\1\112"+
    "\1\6\1\113\1\114\5\6\1\115\3\6\1\116\1\6"+
    "\1\117\1\120\7\6\1\121\3\6\1\122\1\123\1\124"+
    "\1\125\1\126\1\6\1\127\1\6\1\130";

  private static int [] zzUnpackAction() {
    int [] result = new int[277];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u01e3"+
    "\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u0381\0\u03c6\0\u040b"+
    "\0\u0450\0\u0495\0\u04da\0\u019e\0\u051f\0\u0564\0\u05a9\0\u019e"+
    "\0\u05ee\0\u019e\0\u0633\0\u0678\0\u06bd\0\u0702\0\u0747\0\u078c"+
    "\0\u07d1\0\u0816\0\u085b\0\u08a0\0\u08e5\0\u092a\0\u096f\0\u09b4"+
    "\0\u09f9\0\u0a3e\0\u06bd\0\u019e\0\u019e\0\u019e\0\u019e\0\u0a83"+
    "\0\u0ac8\0\u019e\0\u0b0d\0\u019e\0\u019e\0\u0b52\0\u0b97\0\u0bdc"+
    "\0\u019e\0\u019e\0\u0c21\0\u019e\0\u0c66\0\u0cab\0\u019e\0\u0cf0"+
    "\0\u019e\0\u0cf0\0\u019e\0\u0d35\0\u0d7a\0\u0dbf\0\u0e04\0\u0633"+
    "\0\u0e49\0\u0e8e\0\u0ed3\0\u0f18\0\u0f5d\0\u0fa2\0\u0fe7\0\u102c"+
    "\0\u1071\0\u10b6\0\u10fb\0\u1140\0\u1185\0\u11ca\0\u05a9\0\u019e"+
    "\0\u05ee\0\u019e\0\u120f\0\u1254\0\u0381\0\u1299\0\u12de\0\u1323"+
    "\0\u1368\0\u13ad\0\u13f2\0\u1437\0\u147c\0\u14c1\0\u1506\0\u154b"+
    "\0\u1590\0\u15d5\0\u161a\0\u165f\0\u16a4\0\u16e9\0\u172e\0\u1773"+
    "\0\u17b8\0\u17fd\0\u1842\0\u1887\0\u18cc\0\u019e\0\u019e\0\u019e"+
    "\0\u019e\0\u019e\0\u0c21\0\u1911\0\u0c66\0\u0d35\0\u1956\0\u199b"+
    "\0\u19e0\0\u1a25\0\u1a6a\0\u1a6a\0\u1aaf\0\u1af4\0\u019e\0\u1b39"+
    "\0\u1b7e\0\u1bc3\0\u1c08\0\u1c4d\0\u0381\0\u1c92\0\u1cd7\0\u0381"+
    "\0\u1d1c\0\u1d61\0\u1da6\0\u1deb\0\u1e30\0\u1e75\0\u1eba\0\u1eff"+
    "\0\u1f44\0\u1f89\0\u1fce\0\u2013\0\u2058\0\u209d\0\u20e2\0\u2127"+
    "\0\u216c\0\u21b1\0\u21f6\0\u223b\0\u2280\0\u22c5\0\u230a\0\u234f"+
    "\0\u2394\0\u1956\0\u23d9\0\u241e\0\u241e\0\u2463\0\u2463\0\u24a8"+
    "\0\u24ed\0\u2532\0\u2577\0\u25bc\0\u0381\0\u2601\0\u2646\0\u268b"+
    "\0\u26d0\0\u2715\0\u275a\0\u279f\0\u0381\0\u27e4\0\u2829\0\u286e"+
    "\0\u28b3\0\u28f8\0\u293d\0\u2982\0\u29c7\0\u2a0c\0\u0381\0\u2a51"+
    "\0\u2a96\0\u2adb\0\u2b20\0\u2b65\0\u2baa\0\u2bef\0\u2c34\0\u2c79"+
    "\0\u2cbe\0\u2d03\0\u2d48\0\u0381\0\u0381\0\u2d8d\0\u2dd2\0\u2e17"+
    "\0\u2e5c\0\u0381\0\u0381\0\u2ea1\0\u2ee6\0\u2f2b\0\u0381\0\u2f70"+
    "\0\u0381\0\u2fb5\0\u0381\0\u2ffa\0\u303f\0\u3084\0\u30c9\0\u310e"+
    "\0\u3153\0\u0381\0\u3198\0\u0381\0\u0381\0\u0381\0\u0381\0\u31dd"+
    "\0\u0381\0\u3222\0\u0381\0\u0381\0\u3267\0\u32ac\0\u32f1\0\u3336"+
    "\0\u337b\0\u0381\0\u33c0\0\u3405\0\u344a\0\u0381\0\u348f\0\u0381"+
    "\0\u0381\0\u34d4\0\u3519\0\u355e\0\u35a3\0\u35e8\0\u362d\0\u3672"+
    "\0\u0381\0\u36b7\0\u36fc\0\u3741\0\u0381\0\u0381\0\u0381\0\u0381"+
    "\0\u0381\0\u3786\0\u0381\0\u37cb\0\u0381";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[277];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\16\1\23\1\24\1\25"+
    "\1\7\1\26\1\27\1\30\1\24\1\31\1\32\1\33"+
    "\1\7\2\34\1\35\1\36\1\37\2\40\2\41\1\42"+
    "\1\16\1\43\1\44\2\45\1\26\1\46\1\47\1\50"+
    "\3\16\1\51\1\16\1\52\1\53\1\36\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\2\7\1\70\1\16\4\71\1\72\3\71"+
    "\1\73\4\71\1\73\4\71\1\73\5\71\1\73\1\71"+
    "\33\73\17\71\1\73\4\71\1\74\3\71\1\73\4\71"+
    "\1\73\4\71\1\73\5\71\1\73\1\71\33\73\17\71"+
    "\1\73\5\71\1\75\2\71\1\75\1\71\1\75\2\71"+
    "\1\75\4\71\1\75\5\71\1\75\1\71\33\75\17\71"+
    "\1\75\1\76\2\71\1\77\13\76\3\71\3\76\1\71"+
    "\37\76\2\71\2\76\1\71\5\76\1\71\1\76\1\71"+
    "\3\76\3\71\1\77\101\71\105\0\1\100\2\0\1\101"+
    "\13\100\3\0\3\100\1\0\37\100\2\0\2\100\1\0"+
    "\1\100\1\102\3\100\1\0\1\100\1\0\3\100\73\0"+
    "\1\103\16\0\1\104\2\0\1\104\1\0\1\104\2\0"+
    "\1\104\4\0\1\104\5\0\1\104\1\0\33\104\17\0"+
    "\1\104\4\0\1\105\105\0\1\106\2\0\1\106\1\0"+
    "\1\106\2\0\1\106\4\0\1\106\5\0\1\106\1\0"+
    "\33\106\17\0\1\106\10\0\1\107\4\0\1\107\4\0"+
    "\1\107\7\0\33\107\24\0\1\12\1\110\2\0\1\16"+
    "\2\110\1\111\1\0\1\16\4\0\1\16\5\0\2\110"+
    "\33\16\16\0\1\70\1\16\12\0\1\112\1\113\103\0"+
    "\1\20\1\114\1\0\1\115\101\0\1\114\104\0\1\116"+
    "\1\117\71\0\16\120\1\121\1\0\1\120\1\122\63\120"+
    "\17\123\1\0\1\124\1\125\63\123\4\0\1\12\1\110"+
    "\2\0\1\16\2\110\1\111\1\0\1\16\4\0\1\16"+
    "\5\0\2\110\2\16\1\126\26\16\1\126\1\16\16\0"+
    "\1\70\1\16\17\0\1\127\4\0\1\130\1\127\76\0"+
    "\1\131\5\0\1\131\1\0\1\132\61\0\1\12\1\110"+
    "\2\0\3\110\1\111\1\0\1\110\4\0\1\110\5\0"+
    "\35\110\17\0\1\110\4\0\1\12\1\110\2\0\1\16"+
    "\2\110\1\111\1\0\1\16\4\0\1\16\5\0\2\110"+
    "\2\16\1\133\16\16\1\134\2\16\1\135\4\16\1\133"+
    "\1\16\16\0\1\70\1\16\4\0\1\12\1\110\2\0"+
    "\1\16\2\110\1\111\1\0\1\16\4\0\1\16\5\0"+
    "\2\110\3\16\1\136\26\16\1\136\16\0\1\70\1\16"+
    "\4\0\1\12\1\110\2\0\1\16\2\110\1\111\1\0"+
    "\1\137\4\0\1\16\5\0\2\110\2\16\1\140\12\16"+
    "\2\141\12\16\1\140\1\16\16\0\1\70\1\16\4\0"+
    "\1\12\1\110\2\0\1\16\2\110\1\111\1\0\1\16"+
    "\4\0\1\16\5\0\2\110\5\16\2\142\24\16\16\0"+
    "\1\70\1\16\4\0\1\12\1\110\2\0\1\16\2\110"+
    "\1\111\1\0\1\143\4\0\1\16\5\0\2\110\33\16"+
    "\16\0\1\70\1\16\4\0\1\12\1\110\2\0\1\16"+
    "\2\110\1\111\1\0\1\16\4\0\1\16\5\0\2\110"+
    "\2\16\1\144\2\16\2\145\2\16\1\146\17\16\1\144"+
    "\1\16\16\0\1\70\1\16\4\0\1\12\1\110\2\0"+
    "\1\16\2\110\1\111\1\0\1\16\4\0\1\147\5\0"+
    "\2\110\3\16\1\150\13\16\1\147\12\16\1\150\16\0"+
    "\1\70\1\16\4\0\1\12\1\110\2\0\1\16\2\110"+
    "\1\111\1\0\1\16\4\0\1\16\5\0\2\110\2\16"+
    "\1\151\6\16\1\152\17\16\1\151\1\16\16\0\1\70"+
    "\1\16\4\0\1\12\1\110\2\0\1\16\2\110\1\111"+
    "\1\0\1\16\4\0\1\16\5\0\2\110\21\16\1\153"+
    "\11\16\16\0\1\70\1\16\4\0\1\12\1\110\2\0"+
    "\1\16\2\110\1\111\1\0\1\16\4\0\1\16\5\0"+
    "\2\110\5\16\2\154\24\16\16\0\1\70\1\16\4\0"+
    "\1\12\1\110\2\0\1\16\2\110\1\111\1\0\1\155"+
    "\4\0\1\16\5\0\2\110\2\16\1\156\6\16\1\157"+
    "\17\16\1\156\1\16\16\0\1\70\1\16\4\0\1\12"+
    "\1\110\2\0\1\16\2\110\1\111\1\0\1\16\4\0"+
    "\1\16\5\0\2\110\4\16\1\160\2\161\2\162\22\16"+
    "\16\0\1\70\1\16\4\0\1\12\1\110\2\0\1\16"+
    "\2\110\1\111\1\0\1\16\4\0\1\163\5\0\2\110"+
    "\17\16\1\163\13\16\16\0\1\70\1\16\4\0\1\12"+
    "\1\110\2\0\1\16\2\110\1\111\1\0\1\16\4\0"+
    "\1\16\5\0\2\110\27\16\1\164\3\16\16\0\1\70"+
    "\1\16\4\0\1\12\1\110\2\0\1\16\2\110\1\111"+
    "\1\0\1\16\4\0\1\16\5\0\2\110\5\16\2\165"+
    "\24\16\16\0\1\70\1\16\71\0\1\166\105\0\1\167"+
    "\105\0\1\170\110\0\1\171\5\0\17\67\1\0\61\67"+
    "\2\0\2\67\10\0\1\70\4\0\1\70\4\0\1\70"+
    "\7\0\33\70\16\0\2\70\4\0\1\172\1\173\2\0"+
    "\3\173\1\174\1\0\1\173\4\0\1\173\5\0\35\173"+
    "\17\0\1\173\5\0\1\75\2\0\3\75\1\175\1\0"+
    "\1\75\4\0\1\75\5\0\35\75\17\0\1\75\1\76"+
    "\3\0\13\76\3\0\3\76\1\0\37\76\2\0\2\76"+
    "\1\0\5\76\1\0\1\76\1\0\3\76\1\100\2\0"+
    "\1\101\13\100\3\0\3\100\1\0\37\100\2\0\2\100"+
    "\1\0\5\100\1\0\1\100\1\0\3\100\5\0\1\104"+
    "\2\0\3\104\1\176\1\0\1\104\4\0\1\104\5\0"+
    "\35\104\17\0\1\104\5\0\1\177\2\0\1\177\1\0"+
    "\1\177\2\0\1\177\4\0\1\177\5\0\1\177\1\0"+
    "\33\177\17\0\1\177\5\0\1\106\2\0\1\106\1\0"+
    "\1\106\2\0\1\106\4\0\1\106\5\0\35\106\17\0"+
    "\1\106\10\0\1\107\1\200\3\0\1\107\4\0\1\107"+
    "\7\0\33\107\25\0\1\110\2\0\3\110\1\111\1\0"+
    "\1\110\4\0\1\110\5\0\35\110\17\0\1\110\12\0"+
    "\1\112\1\201\1\0\1\202\101\0\1\201\104\0\1\114"+
    "\2\0\1\115\100\0\1\203\1\204\1\0\1\203\102\0"+
    "\1\116\1\205\1\0\1\206\101\0\1\205\72\0\16\120"+
    "\1\207\1\0\1\120\1\122\63\120\16\0\1\210\104\0"+
    "\1\120\1\0\3\120\10\0\1\120\4\0\1\120\1\0"+
    "\1\120\5\0\1\120\34\0\17\123\1\0\1\207\1\125"+
    "\63\123\20\0\1\211\102\0\1\123\1\0\3\123\10\0"+
    "\1\123\4\0\1\123\1\0\1\123\5\0\1\123\40\0"+
    "\1\12\1\110\2\0\1\16\2\110\1\111\1\0\1\16"+
    "\4\0\1\16\5\0\2\110\25\16\1\212\5\16\16\0"+
    "\1\70\1\16\4\0\1\12\1\110\2\0\1\16\2\110"+
    "\1\111\1\0\1\16\4\0\1\16\5\0\2\110\3\16"+
    "\1\213\26\16\1\213\16\0\1\70\1\16\4\0\1\12"+
    "\1\110\2\0\1\16\2\110\1\111\1\0\1\16\4\0"+
    "\1\16\5\0\2\110\22\16\1\214\10\16\16\0\1\70"+
    "\1\16\4\0\1\12\1\110\2\0\1\16\2\110\1\111"+
    "\1\0\1\16\4\0\1\16\5\0\2\110\23\16\1\215"+
    "\7\16\16\0\1\70\1\16\4\0\1\12\1\110\2\0"+
    "\1\16\2\110\1\111\1\0\1\16\4\0\1\16\5\0"+
    "\2\110\13\16\1\216\17\16\16\0\1\70\1\16\4\0"+
    "\1\12\1\110\2\0\1\16\2\110\1\111\1\0\1\16"+
    "\4\0\1\16\5\0\2\110\25\16\1\217\5\16\16\0"+
    "\1\70\1\16\4\0\1\12\1\110\2\0\1\16\2\110"+
    "\1\111\1\0\1\16\4\0\1\16\5\0\2\110\5\16"+
    "\2\220\24\16\16\0\1\70\1\16\4\0\1\12\1\110"+
    "\2\0\1\16\2\110\1\111\1\0\1\221\4\0\1\16"+
    "\5\0\2\110\33\16\16\0\1\70\1\16\4\0\1\12"+
    "\1\110\2\0\1\16\2\110\1\111\1\0\1\16\4\0"+
    "\1\16\5\0\2\110\20\16\1\222\7\16\1\223\2\16"+
    "\16\0\1\70\1\16\4\0\1\12\1\110\2\0\1\16"+
    "\2\110\1\111\1\0\1\16\4\0\1\16\5\0\2\110"+
    "\13\16\1\224\17\16\16\0\1\70\1\16\4\0\1\12"+
    "\1\110\2\0\1\16\2\110\1\111\1\0\1\16\4\0"+
    "\1\16\5\0\2\110\21\16\1\225\11\16\16\0\1\70"+
    "\1\16\4\0\1\12\1\110\2\0\1\16\2\110\1\111"+
    "\1\0\1\16\4\0\1\16\5\0\2\110\13\16\1\226"+
    "\17\16\16\0\1\70\1\16\4\0\1\12\1\110\2\0"+
    "\1\16\2\110\1\111\1\0\1\16\4\0\1\16\5\0"+
    "\2\110\3\16\1\227\26\16\1\227\16\0\1\70\1\16"+
    "\4\0\1\12\1\110\2\0\1\16\2\110\1\111\1\0"+
    "\1\16\4\0\1\16\5\0\2\110\2\230\7\16\1\231"+
    "\1\16\1\232\6\16\1\233\10\16\16\0\1\70\1\16"+
    "\4\0\1\12\1\110\2\0\1\16\2\110\1\111\1\0"+
    "\1\16\4\0\1\234\5\0\2\110\17\16\1\234\13\16"+
    "\16\0\1\70\1\16\4\0\1\12\1\110\2\0\1\16"+
    "\2\110\1\111\1\0\1\16\4\0\1\16\5\0\2\110"+
    "\25\16\1\235\5\16\16\0\1\70\1\16\4\0\1\12"+
    "\1\110\2\0\1\16\2\110\1\111\1\0\1\16\4\0"+
    "\1\236\5\0\2\110\17\16\1\236\13\16\16\0\1\70"+
    "\1\16\4\0\1\12\1\110\2\0\1\16\2\110\1\111"+
    "\1\0\1\16\4\0\1\16\5\0\2\110\22\16\1\237"+
    "\10\16\16\0\1\70\1\16\4\0\1\12\1\110\2\0"+
    "\1\16\2\110\1\111\1\0\1\16\4\0\1\16\5\0"+
    "\2\110\3\16\1\240\7\16\1\241\16\16\1\240\16\0"+
    "\1\70\1\16\4\0\1\12\1\110\2\0\1\16\2\110"+
    "\1\111\1\0\1\16\4\0\1\16\5\0\2\110\15\16"+
    "\2\242\14\16\16\0\1\70\1\16\4\0\1\12\1\110"+
    "\2\0\1\16\2\110\1\111\1\0\1\16\4\0\1\16"+
    "\5\0\2\110\3\16\1\243\26\16\1\243\16\0\1\70"+
    "\1\16\4\0\1\12\1\110\2\0\1\16\2\110\1\111"+
    "\1\0\1\16\4\0\1\16\5\0\2\110\15\16\2\244"+
    "\14\16\16\0\1\70\1\16\4\0\1\12\1\110\2\0"+
    "\1\16\2\110\1\111\1\0\1\16\4\0\1\16\5\0"+
    "\2\110\20\16\1\245\12\16\16\0\1\70\1\16\4\0"+
    "\1\12\1\110\2\0\1\16\2\110\1\111\1\0\1\16"+
    "\4\0\1\16\5\0\2\110\7\16\2\246\22\16\16\0"+
    "\1\70\1\16\4\0\1\12\1\110\2\0\1\16\2\110"+
    "\1\111\1\0\1\16\4\0\1\16\5\0\2\110\11\16"+
    "\1\247\21\16\16\0\1\70\1\16\4\0\1\12\1\110"+
    "\2\0\1\16\2\110\1\111\1\0\1\250\4\0\1\16"+
    "\5\0\2\110\33\16\16\0\1\70\1\16\4\0\1\12"+
    "\1\110\2\0\1\16\2\110\1\111\1\0\1\16\4\0"+
    "\1\16\5\0\2\110\2\16\1\251\26\16\1\251\1\16"+
    "\16\0\1\70\1\16\5\0\1\173\2\0\3\173\1\174"+
    "\1\0\1\173\4\0\1\173\5\0\35\173\17\0\1\173"+
    "\5\0\1\177\2\0\3\177\1\252\1\0\1\177\4\0"+
    "\1\177\5\0\35\177\17\0\1\177\10\0\1\253\1\0"+
    "\1\253\2\0\1\253\4\0\1\253\7\0\33\253\32\0"+
    "\1\201\2\0\1\202\100\0\1\254\1\255\1\0\1\254"+
    "\102\0\1\204\104\0\1\205\2\0\1\206\100\0\1\256"+
    "\1\257\1\0\1\256\70\0\16\210\1\260\2\210\1\261"+
    "\63\210\20\211\1\262\1\263\63\211\4\0\1\12\1\110"+
    "\2\0\1\16\2\110\1\111\1\0\1\264\4\0\1\16"+
    "\5\0\2\110\33\16\16\0\1\70\1\16\4\0\1\12"+
    "\1\110\2\0\1\16\2\110\1\111\1\0\1\265\4\0"+
    "\1\16\5\0\2\110\33\16\16\0\1\70\1\16\4\0"+
    "\1\12\1\110\2\0\1\16\2\110\1\111\1\0\1\16"+
    "\4\0\1\266\5\0\2\110\17\16\1\266\13\16\16\0"+
    "\1\70\1\16\4\0\1\12\1\110\2\0\1\16\2\110"+
    "\1\111\1\0\1\267\4\0\1\16\5\0\2\110\33\16"+
    "\16\0\1\70\1\16\4\0\1\12\1\110\2\0\1\16"+
    "\2\110\1\111\1\0\1\270\4\0\1\16\5\0\2\110"+
    "\33\16\16\0\1\70\1\16\4\0\1\12\1\110\2\0"+
    "\1\16\2\110\1\111\1\0\1\16\4\0\1\16\5\0"+
    "\2\110\7\16\2\271\22\16\16\0\1\70\1\16\4\0"+
    "\1\12\1\110\2\0\1\16\2\110\1\111\1\0\1\16"+
    "\4\0\1\16\5\0\2\110\22\16\1\272\10\16\16\0"+
    "\1\70\1\16\4\0\1\12\1\110\2\0\1\16\2\110"+
    "\1\111\1\0\1\273\4\0\1\16\5\0\2\110\33\16"+
    "\16\0\1\70\1\16\4\0\1\12\1\110\2\0\1\16"+
    "\2\110\1\111\1\0\1\16\4\0\1\16\5\0\2\110"+
    "\3\16\1\274\26\16\1\274\16\0\1\70\1\16\4\0"+
    "\1\12\1\110\2\0\1\16\2\110\1\111\1\0\1\16"+
    "\4\0\1\16\5\0\2\110\25\16\1\275\5\16\16\0"+
    "\1\70\1\16\4\0\1\12\1\110\2\0\1\16\2\110"+
    "\1\111\1\0\1\16\4\0\1\16\5\0\2\110\15\16"+
    "\2\276\14\16\16\0\1\70\1\16\4\0\1\12\1\110"+
    "\2\0\1\16\2\110\1\111\1\0\1\277\4\0\1\16"+
    "\5\0\2\110\33\16\16\0\1\70\1\16\4\0\1\12"+
    "\1\110\2\0\1\16\2\110\1\111\1\0\1\16\4\0"+
    "\1\16\5\0\2\110\13\16\1\300\17\16\16\0\1\70"+
    "\1\16\4\0\1\12\1\110\2\0\1\16\2\110\1\111"+
    "\1\0\1\16\4\0\1\16\5\0\2\110\5\16\2\301"+
    "\24\16\16\0\1\70\1\16\4\0\1\12\1\110\2\0"+
    "\1\16\2\110\1\111\1\0\1\16\4\0\1\16\5\0"+
    "\2\110\11\16\1\302\21\16\16\0\1\70\1\16\4\0"+
    "\1\12\1\110\2\0\1\16\2\110\1\111\1\0\1\16"+
    "\4\0\1\16\5\0\2\110\5\16\2\303\24\16\16\0"+
    "\1\70\1\16\4\0\1\12\1\110\2\0\1\16\2\110"+
    "\1\111\1\0\1\16\4\0\1\16\5\0\2\110\30\16"+
    "\1\304\2\16\16\0\1\70\1\16\4\0\1\12\1\110"+
    "\2\0\1\16\2\110\1\111\1\0\1\16\4\0\1\16"+
    "\5\0\2\110\11\16\1\305\21\16\16\0\1\70\1\16"+
    "\4\0\1\12\1\110\2\0\1\16\2\110\1\111\1\0"+
    "\1\16\4\0\1\16\5\0\2\110\3\16\1\306\26\16"+
    "\1\306\16\0\1\70\1\16\4\0\1\12\1\110\2\0"+
    "\1\16\2\110\1\111\1\0\1\307\4\0\1\16\5\0"+
    "\2\110\33\16\16\0\1\70\1\16\4\0\1\12\1\110"+
    "\2\0\1\16\2\110\1\111\1\0\1\16\4\0\1\16"+
    "\5\0\2\110\14\16\1\310\16\16\16\0\1\70\1\16"+
    "\4\0\1\12\1\110\2\0\1\16\2\110\1\111\1\0"+
    "\1\311\4\0\1\16\5\0\2\110\33\16\16\0\1\70"+
    "\1\16\4\0\1\12\1\110\2\0\1\16\2\110\1\111"+
    "\1\0\1\16\4\0\1\16\5\0\2\110\2\16\1\312"+
    "\26\16\1\312\1\16\16\0\1\70\1\16\4\0\1\12"+
    "\1\110\2\0\1\16\2\110\1\111\1\0\1\16\4\0"+
    "\1\16\5\0\2\110\15\16\2\313\14\16\16\0\1\70"+
    "\1\16\4\0\1\12\1\110\2\0\1\16\2\110\1\111"+
    "\1\0\1\16\4\0\1\16\5\0\2\110\11\16\1\314"+
    "\21\16\16\0\1\70\1\16\4\0\1\12\1\110\2\0"+
    "\1\16\2\110\1\111\1\0\1\315\4\0\1\16\5\0"+
    "\2\110\33\16\16\0\1\70\1\16\4\0\1\12\1\110"+
    "\2\0\1\16\2\110\1\111\1\0\1\16\4\0\1\16"+
    "\5\0\2\110\3\16\1\316\26\16\1\316\16\0\1\70"+
    "\1\16\4\0\1\12\1\110\2\0\1\16\2\110\1\111"+
    "\1\0\1\16\4\0\1\16\5\0\2\110\21\16\1\317"+
    "\11\16\16\0\1\70\1\16\4\0\1\12\1\110\2\0"+
    "\1\16\2\110\1\111\1\0\1\16\4\0\1\16\5\0"+
    "\2\110\5\16\2\320\24\16\16\0\1\70\1\16\4\0"+
    "\1\12\1\110\2\0\1\16\2\110\1\111\1\0\1\16"+
    "\4\0\1\16\5\0\2\110\4\16\1\321\26\16\16\0"+
    "\1\70\1\16\10\0\1\253\1\200\1\253\2\0\1\253"+
    "\4\0\1\253\7\0\33\253\32\0\1\255\104\0\1\257"+
    "\72\0\16\210\1\322\2\210\1\261\63\210\16\0\1\210"+
    "\1\0\3\210\10\0\1\210\4\0\1\210\1\0\1\210"+
    "\5\0\1\210\34\0\20\211\1\323\1\263\63\211\16\0"+
    "\1\211\1\0\3\211\10\0\1\211\4\0\1\211\1\0"+
    "\1\211\5\0\1\211\40\0\1\12\1\110\2\0\1\16"+
    "\2\110\1\111\1\0\1\16\4\0\1\16\5\0\2\110"+
    "\20\16\1\324\12\16\16\0\1\70\1\16\4\0\1\12"+
    "\1\110\2\0\1\16\2\110\1\111\1\0\1\16\4\0"+
    "\1\16\5\0\2\110\20\16\1\325\12\16\16\0\1\70"+
    "\1\16\4\0\1\12\1\110\2\0\1\16\2\110\1\111"+
    "\1\0\1\16\4\0\1\16\5\0\2\110\14\16\1\326"+
    "\16\16\16\0\1\70\1\16\4\0\1\12\1\110\2\0"+
    "\1\16\2\110\1\111\1\0\1\16\4\0\1\16\5\0"+
    "\2\110\15\16\2\327\14\16\16\0\1\70\1\16\4\0"+
    "\1\12\1\110\2\0\1\16\2\110\1\111\1\0\1\16"+
    "\4\0\1\16\5\0\2\110\11\16\1\330\21\16\16\0"+
    "\1\70\1\16\4\0\1\12\1\110\2\0\1\16\2\110"+
    "\1\111\1\0\1\16\4\0\1\16\5\0\2\110\14\16"+
    "\1\331\16\16\16\0\1\70\1\16\4\0\1\12\1\110"+
    "\2\0\1\16\2\110\1\111\1\0\1\16\4\0\1\16"+
    "\5\0\2\110\12\16\1\332\20\16\16\0\1\70\1\16"+
    "\4\0\1\12\1\110\2\0\1\16\2\110\1\111\1\0"+
    "\1\333\4\0\1\16\5\0\2\110\33\16\16\0\1\70"+
    "\1\16\4\0\1\12\1\110\2\0\1\16\2\110\1\111"+
    "\1\0\1\334\4\0\1\16\5\0\2\110\33\16\16\0"+
    "\1\70\1\16\4\0\1\12\1\110\2\0\1\16\2\110"+
    "\1\111\1\0\1\16\4\0\1\16\5\0\2\110\5\16"+
    "\2\335\24\16\16\0\1\70\1\16\4\0\1\12\1\110"+
    "\2\0\1\16\2\110\1\111\1\0\1\16\4\0\1\16"+
    "\5\0\2\110\2\16\1\336\26\16\1\336\1\16\16\0"+
    "\1\70\1\16\4\0\1\12\1\110\2\0\1\16\2\110"+
    "\1\111\1\0\1\16\4\0\1\16\5\0\2\110\11\16"+
    "\1\337\21\16\16\0\1\70\1\16\4\0\1\12\1\110"+
    "\2\0\1\16\2\110\1\111\1\0\1\16\4\0\1\16"+
    "\5\0\2\110\15\16\2\340\14\16\16\0\1\70\1\16"+
    "\4\0\1\12\1\110\2\0\1\16\2\110\1\111\1\0"+
    "\1\16\4\0\1\16\5\0\2\110\11\16\1\341\21\16"+
    "\16\0\1\70\1\16\4\0\1\12\1\110\2\0\1\16"+
    "\2\110\1\111\1\0\1\16\4\0\1\16\5\0\2\110"+
    "\25\16\1\342\5\16\16\0\1\70\1\16\4\0\1\12"+
    "\1\110\2\0\1\16\2\110\1\111\1\0\1\16\4\0"+
    "\1\16\5\0\2\110\15\16\2\343\14\16\16\0\1\70"+
    "\1\16\4\0\1\12\1\110\2\0\1\16\2\110\1\111"+
    "\1\0\1\16\4\0\1\16\5\0\2\110\15\16\2\344"+
    "\14\16\16\0\1\70\1\16\4\0\1\12\1\110\2\0"+
    "\1\16\2\110\1\111\1\0\1\16\4\0\1\16\5\0"+
    "\2\110\5\16\2\345\24\16\16\0\1\70\1\16\4\0"+
    "\1\12\1\110\2\0\1\16\2\110\1\111\1\0\1\16"+
    "\4\0\1\16\5\0\2\110\15\16\2\346\14\16\16\0"+
    "\1\70\1\16\4\0\1\12\1\110\2\0\1\16\2\110"+
    "\1\111\1\0\1\16\4\0\1\16\5\0\2\110\15\16"+
    "\2\347\14\16\16\0\1\70\1\16\4\0\1\12\1\110"+
    "\2\0\1\16\2\110\1\111\1\0\1\16\4\0\1\16"+
    "\5\0\2\110\11\16\1\350\21\16\16\0\1\70\1\16"+
    "\4\0\1\12\1\110\2\0\1\16\2\110\1\111\1\0"+
    "\1\16\4\0\1\16\5\0\2\110\21\16\1\351\11\16"+
    "\16\0\1\70\1\16\4\0\1\12\1\110\2\0\1\16"+
    "\2\110\1\111\1\0\1\16\4\0\1\16\5\0\2\110"+
    "\5\16\2\352\24\16\16\0\1\70\1\16\4\0\1\12"+
    "\1\110\2\0\1\16\2\110\1\111\1\0\1\353\4\0"+
    "\1\16\5\0\2\110\33\16\16\0\1\70\1\16\4\0"+
    "\1\12\1\110\2\0\1\16\2\110\1\111\1\0\1\16"+
    "\4\0\1\354\5\0\2\110\17\16\1\354\13\16\16\0"+
    "\1\70\1\16\4\0\1\12\1\110\2\0\1\16\2\110"+
    "\1\111\1\0\1\355\4\0\1\16\5\0\2\110\33\16"+
    "\16\0\1\70\1\16\4\0\1\12\1\110\2\0\1\16"+
    "\2\110\1\111\1\0\1\16\4\0\1\16\5\0\2\110"+
    "\27\16\1\356\3\16\16\0\1\70\1\16\16\210\1\207"+
    "\2\210\1\261\63\210\20\211\1\207\1\263\63\211\4\0"+
    "\1\12\1\110\2\0\1\16\2\110\1\111\1\0\1\16"+
    "\4\0\1\16\5\0\2\110\15\16\2\357\14\16\16\0"+
    "\1\70\1\16\4\0\1\12\1\110\2\0\1\16\2\110"+
    "\1\111\1\0\1\360\4\0\1\16\5\0\2\110\33\16"+
    "\16\0\1\70\1\16\4\0\1\12\1\110\2\0\1\16"+
    "\2\110\1\111\1\0\1\16\4\0\1\16\5\0\2\110"+
    "\12\16\1\361\20\16\16\0\1\70\1\16\4\0\1\12"+
    "\1\110\2\0\1\16\2\110\1\111\1\0\1\362\4\0"+
    "\1\16\5\0\2\110\33\16\16\0\1\70\1\16\4\0"+
    "\1\12\1\110\2\0\1\16\2\110\1\111\1\0\1\16"+
    "\4\0\1\16\5\0\2\110\5\16\2\363\24\16\16\0"+
    "\1\70\1\16\4\0\1\12\1\110\2\0\1\16\2\110"+
    "\1\111\1\0\1\16\4\0\1\16\5\0\2\110\15\16"+
    "\2\364\14\16\16\0\1\70\1\16\4\0\1\12\1\110"+
    "\2\0\1\16\2\110\1\111\1\0\1\16\4\0\1\365"+
    "\5\0\2\110\17\16\1\365\13\16\16\0\1\70\1\16"+
    "\4\0\1\12\1\110\2\0\1\16\2\110\1\111\1\0"+
    "\1\366\4\0\1\16\5\0\2\110\33\16\16\0\1\70"+
    "\1\16\4\0\1\12\1\110\2\0\1\16\2\110\1\111"+
    "\1\0\1\16\4\0\1\16\5\0\2\110\2\16\1\367"+
    "\27\16\1\367\16\0\1\70\1\16\4\0\1\12\1\110"+
    "\2\0\1\16\2\110\1\111\1\0\1\16\4\0\1\16"+
    "\5\0\2\110\5\16\2\370\24\16\16\0\1\70\1\16"+
    "\4\0\1\12\1\110\2\0\1\16\2\110\1\111\1\0"+
    "\1\16\4\0\1\16\5\0\2\110\11\16\1\371\21\16"+
    "\16\0\1\70\1\16\4\0\1\12\1\110\2\0\1\16"+
    "\2\110\1\111\1\0\1\372\4\0\1\16\5\0\2\110"+
    "\33\16\16\0\1\70\1\16\4\0\1\12\1\110\2\0"+
    "\1\16\2\110\1\111\1\0\1\16\4\0\1\16\5\0"+
    "\2\110\24\16\1\373\6\16\16\0\1\70\1\16\4\0"+
    "\1\12\1\110\2\0\1\16\2\110\1\111\1\0\1\16"+
    "\4\0\1\374\5\0\2\110\17\16\1\374\13\16\16\0"+
    "\1\70\1\16\4\0\1\12\1\110\2\0\1\16\2\110"+
    "\1\111\1\0\1\16\4\0\1\375\5\0\2\110\17\16"+
    "\1\375\13\16\16\0\1\70\1\16\4\0\1\12\1\110"+
    "\2\0\1\16\2\110\1\111\1\0\1\16\4\0\1\16"+
    "\5\0\2\110\15\16\2\376\14\16\16\0\1\70\1\16"+
    "\4\0\1\12\1\110\2\0\1\16\2\110\1\111\1\0"+
    "\1\16\4\0\1\16\5\0\2\110\5\16\2\377\24\16"+
    "\16\0\1\70\1\16\4\0\1\12\1\110\2\0\1\16"+
    "\2\110\1\111\1\0\1\16\4\0\1\16\5\0\2\110"+
    "\20\16\1\u0100\12\16\16\0\1\70\1\16\4\0\1\12"+
    "\1\110\2\0\1\16\2\110\1\111\1\0\1\16\4\0"+
    "\1\16\5\0\2\110\23\16\1\u0101\7\16\16\0\1\70"+
    "\1\16\4\0\1\12\1\110\2\0\1\16\2\110\1\111"+
    "\1\0\1\16\4\0\1\16\5\0\2\110\5\16\2\u0102"+
    "\24\16\16\0\1\70\1\16\4\0\1\12\1\110\2\0"+
    "\1\16\2\110\1\111\1\0\1\16\4\0\1\16\5\0"+
    "\2\110\15\16\2\u0103\14\16\16\0\1\70\1\16\4\0"+
    "\1\12\1\110\2\0\1\16\2\110\1\111\1\0\1\16"+
    "\4\0\1\16\5\0\2\110\22\16\1\u0104\10\16\16\0"+
    "\1\70\1\16\4\0\1\12\1\110\2\0\1\16\2\110"+
    "\1\111\1\0\1\16\4\0\1\16\5\0\2\110\2\u0105"+
    "\31\16\16\0\1\70\1\16\4\0\1\12\1\110\2\0"+
    "\1\16\2\110\1\111\1\0\1\16\4\0\1\16\5\0"+
    "\2\110\4\16\1\u0106\26\16\16\0\1\70\1\16\4\0"+
    "\1\12\1\110\2\0\1\16\2\110\1\111\1\0\1\16"+
    "\4\0\1\16\5\0\2\110\14\16\1\u0107\16\16\16\0"+
    "\1\70\1\16\4\0\1\12\1\110\2\0\1\16\2\110"+
    "\1\111\1\0\1\16\4\0\1\16\5\0\2\110\2\16"+
    "\1\u0108\26\16\1\u0108\1\16\16\0\1\70\1\16\4\0"+
    "\1\12\1\110\2\0\1\16\2\110\1\111\1\0\1\16"+
    "\4\0\1\16\5\0\2\110\25\16\1\u0109\5\16\16\0"+
    "\1\70\1\16\4\0\1\12\1\110\2\0\1\16\2\110"+
    "\1\111\1\0\1\16\4\0\1\16\5\0\2\110\2\16"+
    "\1\u010a\26\16\1\u010a\1\16\16\0\1\70\1\16\4\0"+
    "\1\12\1\110\2\0\1\16\2\110\1\111\1\0\1\16"+
    "\4\0\1\16\5\0\2\110\14\16\1\u010b\16\16\16\0"+
    "\1\70\1\16\4\0\1\12\1\110\2\0\1\16\2\110"+
    "\1\111\1\0\1\16\4\0\1\16\5\0\2\110\14\16"+
    "\1\u010c\16\16\16\0\1\70\1\16\4\0\1\12\1\110"+
    "\2\0\1\16\2\110\1\111\1\0\1\u010d\4\0\1\16"+
    "\5\0\2\110\33\16\16\0\1\70\1\16\4\0\1\12"+
    "\1\110\2\0\1\16\2\110\1\111\1\0\1\u010e\4\0"+
    "\1\16\5\0\2\110\33\16\16\0\1\70\1\16\4\0"+
    "\1\12\1\110\2\0\1\16\2\110\1\111\1\0\1\16"+
    "\4\0\1\16\5\0\2\110\15\16\2\u010f\14\16\16\0"+
    "\1\70\1\16\4\0\1\12\1\110\2\0\1\16\2\110"+
    "\1\111\1\0\1\16\4\0\1\16\5\0\2\110\13\16"+
    "\1\u0110\17\16\16\0\1\70\1\16\4\0\1\12\1\110"+
    "\2\0\1\16\2\110\1\111\1\0\1\16\4\0\1\16"+
    "\5\0\2\110\13\16\1\u0111\17\16\16\0\1\70\1\16"+
    "\4\0\1\12\1\110\2\0\1\16\2\110\1\111\1\0"+
    "\1\16\4\0\1\16\5\0\2\110\27\16\1\u0112\3\16"+
    "\16\0\1\70\1\16\4\0\1\12\1\110\2\0\1\16"+
    "\2\110\1\111\1\0\1\16\4\0\1\16\5\0\2\110"+
    "\15\16\2\u0113\14\16\16\0\1\70\1\16\4\0\1\12"+
    "\1\110\2\0\1\16\2\110\1\111\1\0\1\u0114\4\0"+
    "\1\16\5\0\2\110\33\16\16\0\1\70\1\16\4\0"+
    "\1\12\1\110\2\0\1\16\2\110\1\111\1\0\1\16"+
    "\4\0\1\16\5\0\2\110\3\16\1\u0115\26\16\1\u0115"+
    "\16\0\1\70\1\16";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14352];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\1\1\0\1\11\14\1\1\11\3\1\1\11"+
    "\1\1\1\11\21\1\4\11\2\1\1\11\1\1\2\11"+
    "\3\1\2\11\1\1\1\11\2\1\1\11\1\0\1\11"+
    "\1\1\1\11\1\1\1\0\2\1\2\0\1\1\1\0"+
    "\1\1\1\0\1\1\2\0\1\1\2\0\1\1\1\0"+
    "\1\1\1\0\1\11\1\0\1\11\33\1\5\11\4\0"+
    "\1\1\1\0\1\1\2\0\2\1\1\0\1\11\2\0"+
    "\40\1\1\0\1\1\1\0\1\1\1\0\1\1\4\0"+
    "\36\1\2\0\102\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[277];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _SparqlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2396) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = new char[buffer.length()];
    for (int i = 0; i < zzBuffer.length; i++) {
      zzBuffer[i] = buffer.charAt(i);
    }
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { yybegin(IRI_REF_END); return LIT_IRI_BODY;
          }
        case 89: break;
        case 2: 
          { return BAD_CHARACTER;
          }
        case 90: break;
        case 3: 
          { return OP_LT;
          }
        case 91: break;
        case 4: 
          { return OP_GT;
          }
        case 92: break;
        case 5: 
          { yypushback(yylength()); yybegin(PNAME_NS);
          }
        case 93: break;
        case 6: 
          { return UNKNOWN;
          }
        case 94: break;
        case 7: 
          { return OP_MINUS;
          }
        case 95: break;
        case 8: 
          { return LIT_INTEGER;
          }
        case 96: break;
        case 9: 
          { return OP_DOT;
          }
        case 97: break;
        case 10: 
          { return OP_PLUS;
          }
        case 98: break;
        case 11: 
          { return WHITE_SPACE;
          }
        case 99: break;
        case 12: 
          { return OP_LROUND;
          }
        case 100: break;
        case 13: 
          { return OP_RROUND;
          }
        case 101: break;
        case 14: 
          { return OP_LSQUARE;
          }
        case 102: break;
        case 15: 
          { return OP_RSQUARE;
          }
        case 103: break;
        case 16: 
          { return KW_A;
          }
        case 104: break;
        case 17: 
          { return OP_LCURLY;
          }
        case 105: break;
        case 18: 
          { return OP_RCURLY;
          }
        case 106: break;
        case 19: 
          { return OP_SEMI;
          }
        case 107: break;
        case 20: 
          { return OP_COMMA;
          }
        case 108: break;
        case 21: 
          { return OP_EQ;
          }
        case 109: break;
        case 22: 
          { return OP_NOT;
          }
        case 110: break;
        case 23: 
          { return OP_MULT;
          }
        case 111: break;
        case 24: 
          { return OP_DIV;
          }
        case 112: break;
        case 25: 
          { return COMMENT;
          }
        case 113: break;
        case 26: 
          { yybegin(YYINITIAL); return BAD_CHARACTER;
          }
        case 114: break;
        case 27: 
          { yybegin(YYINITIAL); return NAME_COLON;
          }
        case 115: break;
        case 28: 
          { yybegin(PNAME_LN2); return NAME_COLON;
          }
        case 116: break;
        case 29: 
          { yybegin(YYINITIAL); return NAME_LN;
          }
        case 117: break;
        case 30: 
          { yybegin(YYINITIAL); return LIT_IRI_END;
          }
        case 118: break;
        case 31: 
          // lookahead expression with fixed base length
          zzMarkedPos = Character.offsetByCodePoints
              (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzStartRead, 1);
          { yybegin(IRI_REF_BODY); return LIT_IRI_START;
          }
        case 119: break;
        case 32: 
          { return OP_LE;
          }
        case 120: break;
        case 33: 
          { return OP_GE;
          }
        case 121: break;
        case 34: 
          { yypushback(yylength()); yybegin(PNAME_LN);
          }
        case 122: break;
        case 35: 
          { return VAR;
          }
        case 123: break;
        case 36: 
          { return LANGTAG;
          }
        case 124: break;
        case 37: 
          { return LIT_INTEGER_NEG;
          }
        case 125: break;
        case 38: 
          { return LIT_DECIMAL;
          }
        case 126: break;
        case 39: 
          { return LIT_INTEGER_POS;
          }
        case 127: break;
        case 40: 
          { return LIT_STRING;
          }
        case 128: break;
        case 41: 
          { return LIT_NIL;
          }
        case 129: break;
        case 42: 
          { return LIT_ANON;
          }
        case 130: break;
        case 43: 
          { return KW_BY;
          }
        case 131: break;
        case 44: 
          { return OP_PIPEPIPE;
          }
        case 132: break;
        case 45: 
          { return OP_ANDAND;
          }
        case 133: break;
        case 46: 
          { return OP_NE;
          }
        case 134: break;
        case 47: 
          { return OP_HATHAT;
          }
        case 135: break;
        case 48: 
          // lookahead expression with fixed lookahead length
          zzMarkedPos = Character.offsetByCodePoints
              (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
          { return NAME_NS;
          }
        case 136: break;
        case 49: 
          { return LIT_BLANK_NODE;
          }
        case 137: break;
        case 50: 
          { return LIT_DECIMAL_NEG;
          }
        case 138: break;
        case 51: 
          { return LIT_DOUBLE;
          }
        case 139: break;
        case 52: 
          { return LIT_DECIMAL_POS;
          }
        case 140: break;
        case 53: 
          { return KW_ASK;
          }
        case 141: break;
        case 54: 
          { return KW_STR;
          }
        case 142: break;
        case 55: 
          { return LIT_DOUBLE_NEG;
          }
        case 143: break;
        case 56: 
          { return LIT_DOUBLE_POS;
          }
        case 144: break;
        case 57: 
          { return KW_BASE;
          }
        case 145: break;
        case 58: 
          { return KW_FROM;
          }
        case 146: break;
        case 59: 
          { return KW_LANG;
          }
        case 147: break;
        case 60: 
          { return LIT_TRUE;
          }
        case 148: break;
        case 61: 
          { return KW_DESC;
          }
        case 149: break;
        case 62: 
          { return KW_NAMED;
          }
        case 150: break;
        case 63: 
          { return KW_BOUND;
          }
        case 151: break;
        case 64: 
          { return KW_REGEX;
          }
        case 152: break;
        case 65: 
          { return LIT_FALSE;
          }
        case 153: break;
        case 66: 
          { return KW_IS_IRI;
          }
        case 154: break;
        case 67: 
          { return KW_IS_URI;
          }
        case 155: break;
        case 68: 
          { return KW_LIMIT;
          }
        case 156: break;
        case 69: 
          { return KW_ORDER;
          }
        case 157: break;
        case 70: 
          { return KW_UNION;
          }
        case 158: break;
        case 71: 
          { return KW_WHERE;
          }
        case 159: break;
        case 72: 
          { return KW_GRAPH;
          }
        case 160: break;
        case 73: 
          { return KW_SELECT;
          }
        case 161: break;
        case 74: 
          { return KW_PREFIX;
          }
        case 162: break;
        case 75: 
          { return KW_FILTER;
          }
        case 163: break;
        case 76: 
          { return KW_INSERT;
          }
        case 164: break;
        case 77: 
          { return KW_DELETE;
          }
        case 165: break;
        case 78: 
          { return KW_OFFSET;
          }
        case 166: break;
        case 79: 
          { return KW_REDUCED;
          }
        case 167: break;
        case 80: 
          { return KW_IS_BLANK;
          }
        case 168: break;
        case 81: 
          { return KW_SAME_TERM;
          }
        case 169: break;
        case 82: 
          { return KW_DESCRIBE;
          }
        case 170: break;
        case 83: 
          { return KW_DATATYPE;
          }
        case 171: break;
        case 84: 
          { return KW_DISTINCT;
          }
        case 172: break;
        case 85: 
          { return KW_OPTIONAL;
          }
        case 173: break;
        case 86: 
          { return KW_IS_LITERAL;
          }
        case 174: break;
        case 87: 
          { return KW_CONSTRUCT;
          }
        case 175: break;
        case 88: 
          { return KW_LANGMATCHES;
          }
        case 176: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
